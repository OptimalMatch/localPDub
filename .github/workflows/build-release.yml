name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v0.1.1)'
        required: true
        default: 'v0.1.1'

jobs:
  build-linux-x86_64:
    runs-on: pop-os-1

    steps:
    - name: Install dependencies
      run: |
        # Continue on repository errors
        sudo apt-get update || true

        # Install required packages
        sudo apt-get install -y \
          build-essential \
          cmake \
          git \
          libssl-dev \
          libargon2-dev \
          nlohmann-json3-dev \
          pkg-config \
          ca-certificates

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create build directory
      run: mkdir -p build

    - name: Configure CMake
      working-directory: build
      run: cmake ../cli

    - name: Build
      working-directory: build
      run: make -j$(nproc)

    - name: Strip binary
      working-directory: build
      run: strip localpdub-linux-x86_64

    - name: Package binary
      run: |
        mkdir -p release
        cp build/localpdub-linux-x86_64 release/
        cd release
        tar -czf localpdub-linux-x86_64.tar.gz localpdub-linux-x86_64
        sha256sum localpdub-linux-x86_64.tar.gz > localpdub-linux-x86_64.tar.gz.sha256

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: localpdub-linux-x86_64
        path: |
          release/localpdub-linux-x86_64
          release/localpdub-linux-x86_64.tar.gz
          release/localpdub-linux-x86_64.tar.gz.sha256

  create-release:
    needs: build-linux-x86_64
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: localpdub-linux-x86_64
        path: release/

    - name: Set release tag
      id: set_tag
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.set_tag.outputs.tag }}
        release_name: LocalPDub ${{ steps.set_tag.outputs.tag }}
        body: |
          # LocalPDub Password Manager ${{ steps.set_tag.outputs.tag }}

          ## Downloads

          ### Linux x86_64 (Debian/Ubuntu)
          Download the appropriate file for your system:
          - `localpdub-linux-x86_64` - Standalone executable
          - `localpdub-linux-x86_64.tar.gz` - Compressed archive

          ## Installation

          ```bash
          # Download and extract
          tar -xzf localpdub-linux-x86_64.tar.gz

          # Make executable
          chmod +x localpdub-linux-x86_64

          # Optional: Move to PATH
          sudo mv localpdub-linux-x86_64 /usr/local/bin/localpdub
          ```

          ## Features
          - Secure password storage with Argon2 key derivation
          - AES-256 encryption for vault data
          - Network sync between devices
          - Colorful ANSI terminal interface
          - Single keystroke menu navigation

          ## Checksums
          SHA256 checksums are provided for verification.
        draft: false
        prerelease: false

    - name: Upload Release Asset - Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/localpdub-linux-x86_64
        asset_name: localpdub-linux-x86_64
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - Archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/localpdub-linux-x86_64.tar.gz
        asset_name: localpdub-linux-x86_64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset - Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/localpdub-linux-x86_64.tar.gz.sha256
        asset_name: localpdub-linux-x86_64.tar.gz.sha256
        asset_content_type: text/plain