name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v0.1.1)'
        required: true
        default: 'v0.1.1'

jobs:
  build-linux-x86_64:
    runs-on: pop-os-1
    name: Build Linux x86_64

    steps:
    - name: Install dependencies
      run: |
        # Continue on repository errors
        sudo apt-get update || true

        # Install required packages
        sudo apt-get install -y \
          build-essential \
          cmake \
          git \
          libssl-dev \
          libargon2-dev \
          nlohmann-json3-dev \
          pkg-config \
          ca-certificates

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create build directory
      run: mkdir -p build

    - name: Configure CMake
      working-directory: build
      run: cmake ../cli

    - name: Build
      working-directory: build
      run: make -j$(nproc)

    - name: Strip binary
      working-directory: build
      run: strip cli-localpdub-linux-x86_64

    - name: Package binary
      run: |
        mkdir -p release
        cp build/cli-localpdub-linux-x86_64 release/
        cd release
        tar -czf cli-localpdub-linux-x86_64.tar.gz cli-localpdub-linux-x86_64
        sha256sum cli-localpdub-linux-x86_64.tar.gz > cli-localpdub-linux-x86_64.tar.gz.sha256

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: cli-localpdub-linux-x86_64
        path: |
          release/cli-localpdub-linux-x86_64
          release/cli-localpdub-linux-x86_64.tar.gz
          release/cli-localpdub-linux-x86_64.tar.gz.sha256

  # ARM64 build is currently disabled due to cross-compilation complexity
  # To enable: install ARM64 libraries or use static linking
  build-linux-arm64:
    runs-on: pop-os-1
    name: Build Linux ARM64 (Cross-compile)
    # Make this job optional - workflow continues even if it fails
    continue-on-error: true

    steps:
    - name: Install cross-compilation dependencies
      run: |
        # Continue on repository errors
        sudo apt-get update || true

        # Install ARM64 cross-compilation toolchain
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          cmake \
          git \
          pkg-config \
          ca-certificates \
          libssl-dev \
          libargon2-dev \
          nlohmann-json3-dev \
          wget

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build ARM64 dependencies
      run: |
        echo "Building ARM64 dependencies from source..."
        ./scripts/build-arm64-deps.sh

    - name: Create build directory
      run: mkdir -p build-arm64

    - name: Configure CMake for ARM64
      working-directory: build-arm64
      run: |
        # Use the toolchain file with our custom-built dependencies
        cmake ../cli \
          -DCMAKE_TOOLCHAIN_FILE=../deps/arm64/toolchain-arm64-with-deps.cmake

    - name: Build
      working-directory: build-arm64
      run: make -j$(nproc)

    - name: Strip binary
      working-directory: build-arm64
      run: aarch64-linux-gnu-strip cli-localpdub-linux-arm64

    - name: Package binary
      run: |
        mkdir -p release
        cp build-arm64/cli-localpdub-linux-arm64 release/
        cd release
        tar -czf cli-localpdub-linux-arm64.tar.gz cli-localpdub-linux-arm64
        sha256sum cli-localpdub-linux-arm64.tar.gz > cli-localpdub-linux-arm64.tar.gz.sha256

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: cli-localpdub-linux-arm64
        path: |
          release/cli-localpdub-linux-arm64
          release/cli-localpdub-linux-arm64.tar.gz
          release/cli-localpdub-linux-arm64.tar.gz.sha256

  create-release:
    needs: [build-linux-x86_64, build-linux-arm64]
    runs-on: pop-os-1
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update || true
        sudo apt install gh -y

    - name: Download x86_64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: cli-localpdub-linux-x86_64
        path: release/

    - name: Download ARM64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: cli-localpdub-linux-arm64
        path: release/
      continue-on-error: true

    - name: Set release tag
      id: set_tag
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if release already exists
        if gh release view "${{ steps.set_tag.outputs.tag }}" &>/dev/null; then
          echo "Release ${{ steps.set_tag.outputs.tag }} already exists, deleting..."
          gh release delete "${{ steps.set_tag.outputs.tag }}" --yes
        fi

        # Create release with description
        cat << 'EOF' > release_notes.md
        # LocalPDub Password Manager ${{ steps.set_tag.outputs.tag }}

        ## Downloads

        ### Linux x86_64 (Debian/Ubuntu)
        - `cli-localpdub-linux-x86_64` - Standalone executable
        - `cli-localpdub-linux-x86_64.tar.gz` - Compressed archive

        ### Linux ARM64 (Raspberry Pi 4/5, ARM servers)
        - `cli-localpdub-linux-arm64` - Standalone executable
        - `cli-localpdub-linux-arm64.tar.gz` - Compressed archive

        ## Installation

        ```bash
        # For x86_64:
        tar -xzf cli-localpdub-linux-x86_64.tar.gz
        chmod +x cli-localpdub-linux-x86_64
        sudo mv cli-localpdub-linux-x86_64 /usr/local/bin/localpdub

        # For ARM64:
        tar -xzf cli-localpdub-linux-arm64.tar.gz
        chmod +x cli-localpdub-linux-arm64
        sudo mv cli-localpdub-linux-arm64 /usr/local/bin/localpdub
        ```

        ## Features
        - Secure password storage with Argon2 key derivation
        - AES-256 encryption for vault data
        - Network sync between devices
        - Colorful ANSI terminal interface
        - Single keystroke menu navigation

        ## Checksums
        SHA256 checksums are provided for verification.
        EOF

        # Create the release and upload assets
        # Build file list - always include x86_64
        FILES="release/cli-localpdub-linux-x86_64 release/cli-localpdub-linux-x86_64.tar.gz release/cli-localpdub-linux-x86_64.tar.gz.sha256"

        # Add ARM64 files if they exist
        if [ -f "release/cli-localpdub-linux-arm64" ]; then
          FILES="$FILES release/cli-localpdub-linux-arm64 release/cli-localpdub-linux-arm64.tar.gz release/cli-localpdub-linux-arm64.tar.gz.sha256"
        fi

        gh release create "${{ steps.set_tag.outputs.tag }}" \
          --title "LocalPDub ${{ steps.set_tag.outputs.tag }}" \
          --notes-file release_notes.md \
          $FILES